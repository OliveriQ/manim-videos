from manim import *


class ChainRule(Scene):
  def construct(self):
    pt1a = MathTex("\\text{Let's say we have a function } ", "g(", "h(", "x", ")", ")")
    pt1b = MathTex("\\underline{\\text{Example :}}").scale(0.75).to_edge(UL)
    pt1c = MathTex("g(", "h(", "x", ")", ")").scale(1.5)
    pt1d = MathTex("\\text{This means that the input of }", "g", "\\text{ is }", "h(x)").scale(0.75).to_edge(UP).shift(DOWN)
    pt1e = MathTex("\\text{And the input of }", "h(x)", "\\text{ is }", "x").scale(0.75).to_edge(UP).shift(DOWN)
    pt1f = MathTex("\\text{So how does this relate to taking the derivative of }", "g(", "h(", "x", ")", ")", "\\text{ ?}").scale(0.75).to_edge(UP).shift(DOWN)
    pt1g = MathTex("\dv{x}", r"\left(g(h(x)) \right)").scale(1.5)

    pt1a[1].set_color(RED)
    pt1a[2].set_color(BLUE)
    pt1a[3].set_color(BLUE)
    pt1a[4].set_color(BLUE)
    pt1a[5].set_color(RED)

    pt1c[0].set_color(RED)
    pt1c[1].set_color(BLUE)
    pt1c[2].set_color(BLUE)
    pt1c[3].set_color(BLUE)
    pt1c[4].set_color(RED)

    pt1d[1].set_color(RED)
    pt1d[3].set_color(BLUE)
    pt1e[1].set_color(BLUE)
    pt1e[3].set_color(BLUE)

    pt1f[1].set_color(RED)
    pt1f[2].set_color(BLUE)
    pt1f[3].set_color(BLUE)
    pt1f[4].set_color(BLUE)
    pt1f[5].set_color(RED)
    
    self.play(Write(pt1a))
    self.wait()
    self.play(Transform(pt1a, pt1b))
    self.wait()
    self.play(Write(pt1c))
    self.wait(3)
    self.play(Write(pt1d))
    self.wait(2)
    self.play(Transform(pt1d, pt1e))
    self.wait(3)
    self.play(Transform(pt1d, pt1f))
    self.play(Transform(pt1c, pt1g))
    self.wait(3)

    self.play(FadeOut(pt1a),FadeOut(pt1c),FadeOut(pt1d))
    self.wait()

    pt2a = MathTex("\\text{Well, let's start by looking at how }", "h(x)", "\\text{ changes...}")
    pt2b = MathTex("\\text{Well, let's start by looking at how }", "h(x)", "\\text{ changes...}").scale(0.75).to_edge(UL)
    pt2c = MathTex("\\text{If we change } x \\text{ by a tiny amount } ", r"\dd x", "\\text{, how does }", "h(x)", "\\text{ change?}").scale(0.75).to_edge(UL)
    pt2d = MathTex("\\text{Let's call this change }", "dh", "\\text{, so...}").scale(0.75).to_edge(UL)
    # "dh", " = ", "h'(", "x", ")", r"\dd x" 
    pt2e = MathTex("dh", " = ", "h'(", "x", ")", r"\dd x" ).scale(1.5)
    pt2f = MathTex("\\text{Note that } ", r"\dd x", "\\text{ is an infinitesimally small value...}").scale(0.75).to_edge(DOWN).shift(UP)
    pt2g = MathTex("\\text{This means that the change in }", "h(x)", "\\text{ is equal to its rate of change...}").scale(0.75).to_edge(UL)
    pt2h = MathTex("\\text{And proportional to the tiny change in x, }", r"\dd x", "\\text{, which is almost negligble...}").scale(0.75).to_edge(UL)

    pt2a[1].set_color(BLUE)
    pt2b[1].set_color(BLUE)
    pt2c[1].set_color(YELLOW)
    pt2c[3].set_color(BLUE)
    pt2d[1].set_color(BLUE)

    pt2e[0].set_color(BLUE)
    pt2e[2].set_color(BLUE)
    pt2e[3].set_color(YELLOW)
    pt2e[4].set_color(BLUE)
    pt2e[5].set_color(YELLOW)

    pt2f[1].set_color(YELLOW)
    pt2g[1].set_color(BLUE)
    pt2h[1].set_color(YELLOW)

    self.play(Write(pt2a))
    self.wait(3)
    self.play(Transform(pt2a, pt2b))
    self.wait()
    self.play(Transform(pt2a, pt2c))
    self.wait(4)
    self.play(Transform(pt2a, pt2d))
    self.wait(2)
    self.play(Write(pt2e))
    self.wait(3)
    self.play(Write(pt2f))
    self.wait(4)
    self.play(FadeOut(pt2f))
    self.play(Transform(pt2a, pt2g))
    self.wait(4)
    self.play(Transform(pt2a, pt2h))
    self.wait(4)

    self.play(FadeOut(pt2a),FadeOut(pt2e))
    self.wait()

    pt3a = MathTex("\\text{Now let's look at how }", "g", "\\text{ changes...}")
    pt3b = MathTex("\\text{Now let's look at how }", "g", "\\text{ changes...}").scale(0.75).to_edge(UL)
    pt3c = MathTex("\\text{The input of }", "g", "\\text{ is }", "h(x)", "\\text{. But we have calculated the change in }", "h(x)", "\\text{!}").scale(0.75).to_edge(UL)
    pt3d = MathTex("\\text{We can let }", "k = h(x)", "\\text{ to make things more obvious...}").scale(0.75).to_edge(UL)
    pt3e = MathTex("\\text{And let the change in }", "g", "\\text{ be }", "dg", "\\text{...}").scale(0.75).to_edge(UL)
    pt3f = MathTex("dg", " = ", "g'(", "k", ")", r"\dd k").scale(1.5)
    pt3g = MathTex("dg", " = ", "g'(", "h(", "x", ")", ")", r"\dd h").scale(1.5)
    pt3h = MathTex("\\text{So expanding again...}").scale(0.75).to_edge(UL)
    pt3i = MathTex("\\text{This means the change in }", "g", "\\text{ is determined by the change in }", "h", "\\text{...}").scale(0.75).to_edge(UL)
    pt3j = MathTex("\\text{But we know how }", "h", "\\text{ changes with respect to x...}").scale(0.75).to_edge(UL)
    pt3k = pt2e.scale(0.60).to_edge(DOWN).shift(UP)
    pt3l = MathTex("\\text{So we can simply expand }", "dh", "\\text{...}").scale(0.75).to_edge(UL)
    pt3m = MathTex("dg", " = ", "g'(", "h(", "x", ")", ")", "h'(", "x", ")", "dx").scale(1.5)
    pt3n = MathTex(r"dg \over dx", " = ", "g'(", "h(", "x", ")", ")", "h'(", "x", ")", substrings_to_isolate=["dg","dx"]).scale(1.5)
    pt3o = MathTex("\\text{So rearranging...}").scale(0.75).to_edge(UL)

    pt3a[1].set_color(RED)
    pt3b[1].set_color(RED)
    pt3c[1].set_color(RED)

    pt3c[3].set_color(BLUE)
    pt3c[5].set_color(BLUE)
    pt3d[1].set_color(BLUE)

    pt3e[1].set_color(RED)
    pt3e[3].set_color(RED)
    pt3f[1].set_color(RED)
    pt3f[3].set_color(RED)

    pt3f[0].set_color(RED)
    pt3f[2].set_color(RED)
    pt3f[3].set_color(BLUE)
    pt3f[4].set_color(RED)
    pt3f[5].set_color(BLUE)

    pt3g[0].set_color(RED)
    pt3g[2].set_color(RED)
    pt3g[3].set_color(BLUE)
    pt3g[4].set_color(YELLOW)
    pt3g[5].set_color(BLUE)
    pt3g[6].set_color(RED)
    pt3g[7].set_color(BLUE)

    pt3i[1].set_color(RED)
    pt3i[3].set_color(BLUE)
    pt3j[1].set_color(BLUE)
    pt3l[1].set_color(BLUE)

    pt3m[0].set_color(RED)
    pt3m[2].set_color(RED)
    pt3m[3].set_color(BLUE)
    pt3m[4].set_color(YELLOW)
    pt3m[5].set_color(BLUE)
    pt3m[6].set_color(RED)
    pt3m[7].set_color(BLUE)
    pt3m[8].set_color(YELLOW)
    pt3m[9].set_color(BLUE)
    pt3m[10].set_color(YELLOW)

    pt3n.set_color_by_tex("dg", RED)
    pt3n.set_color_by_tex("dx", YELLOW)
    pt3n[2].set_color(YELLOW)
    pt3n[3].set_color(RED)
    pt3n[4].set_color(BLUE)
    pt3n[5].set_color(YELLOW)
    pt3n[6].set_color(BLUE)
    pt3n[7].set_color(RED)
    pt3n[8].set_color(BLUE)
    pt3n[9].set_color(YELLOW)
    pt3n[10].set_color(BLUE)

    self.play(Write(pt3a))
    self.wait(2)
    self.play(Transform(pt3a, pt3b))
    self.wait()
    self.play(Transform(pt3a, pt3c))
    self.wait(4)
    self.play(Transform(pt3a, pt3d))
    self.wait(3)
    self.play(Transform(pt3a, pt3e))
    self.wait()
    self.play(Write(pt3f))
    self.wait(3)
    self.play(Transform(pt3a, pt3h))
    self.wait()
    self.play(Transform(pt3f, pt3g))
    self.wait()
    self.play(Transform(pt3a, pt3i))
    self.wait(3)
    self.play(Transform(pt3a, pt3j))
    self.wait(2)
    self.play(Write(pt3k))
    self.wait(3)
    self.play(Transform(pt3a, pt3l))
    self.wait()
    self.play(TransformMatchingTex(pt3f, pt3m))
    self.wait(4)
    self.play(Transform(pt3a, pt3o))
    self.wait()
    self.play(TransformMatchingTex(pt3f, pt3n))
    self.wait(4)