from manim import *

#Link to video: https://www.youtube.com/watch?v=6JtT9OJTlCc

class ProofACMethod(Scene):
  def construct(self):

    tt1 = MathTex("\\text{The AC method is a way of factoring quadratics of the form:}").shift(UP)
    tt2 = MathTex("ax^2 + bx + c \\text{, where } a > 1").next_to(tt1, DOWN)
    self.play(Write(tt1))
    self.play(Write(tt2))
    self.wait(3)

    self.play(FadeOut(tt1),FadeOut(tt2))

    pt1a = MathTex("\\text{Say we have the quadratic } x^2 + 5x + 6 = 0 \\text{, where } a = 1")
    pt1b = MathTex("\\underline{\\text{Example :}}").scale(0.75).to_edge(UL)
    pt1c = MathTex("x^2 + 5x + 6 = 0")
    pt1d = MathTex("(x + p)(x + q) = 0")
    pt1e = MathTex("(x + 2)(x + 3) = 0")

    exp1a = MathTex("\\text{First, we find two numbers, p and q, that when multipled give c, and when added give b }").scale(0.60).to_edge(UP).shift(DOWN)
    exp1b = MathTex("\\text{So } p = 2 \\text{ and } q = 3").scale(0.75).to_edge(UP).shift(DOWN)
    
    self.play(Write(pt1a))
    self.wait(2)
    self.play(Transform(pt1a, pt1b))
    self.play(Write(pt1c))
    self.wait(2)
    self.play(Write(exp1a))
    self.wait(4)
    self.play(Transform(pt1c, pt1d))
    self.wait()
    self.play(Transform(exp1a, exp1b))
    self.wait(2)
    self.play(Transform(pt1c, pt1e))
    self.wait(3)

    self.play(FadeOut(pt1a),FadeOut(pt1c),FadeOut(exp1a))

    pt2a = MathTex("\\text{But what if we have something like } 3x^2 + 5x + 2 \\text{ ?}")
    pt2b = MathTex("\\text{But what if we have something like } 3x^2 + 5x + 2 \\text{ ?}").scale(0.75).to_edge(UL)
    pt2c = MathTex("3x^2 + 5x + 2 = 0")
    pt2d = MathTex("\\text{Well, according to the AC method, we should do the following:}").scale(0.75).to_edge(UL)
    pt2e = MathTex("\\text{First, we multiple the coefficients } a \\text{ and } c").scale(0.75).to_edge(UL)
    pt2f = MathTex("\\text{Then, we find two numbers that when multipled give } ac \\text{ and when added give } b").scale(0.75).to_edge(UL)
    pt2g = MathTex("\\text{So we expand b as the sum of 3 and 2...}").scale(0.75).to_edge(UL)
    pt2h = MathTex("\\text{Then factorise by grouping...").scale(0.75).to_edge(UL)

    exp2a = MathTex(r"a \times c = 6").scale(0.75).to_edge(DOWN).shift(UP)
    exp2b = MathTex("p = 3 \\text{, } q = 2").scale(0.75).to_edge(DOWN).shift(UP)
    exp2c = MathTex("p = 3 \\text{ and } q = 2").scale(0.75).to_edge(DOWN).shift(UP)
    exp2d = MathTex("3x^2 + 3x + 2x + 2 = 0")
    exp2e = MathTex("3x(x + 1) + 2(x + 1) = 0")
    exp2f = MathTex("(3x + 2)(x + 1) = 0")

    self.play(Write(pt2a))
    self.wait(2)
    self.play(Transform(pt2a, pt2b))
    self.play(Write(pt2c))
    self.wait()
    self.play(Transform(pt2a, pt2d))
    self.wait(3)   
    self.play(Transform(pt2a, pt2e))
    self.wait(3)
    self.play(Write(exp2a))
    self.wait(2)
    self.play(Transform(pt2a, pt2f)) 
    self.wait(3)
    self.wait()
    self.play(Transform(exp2a, exp2b))
    self.wait(3)
    self.play(Transform(pt2a, pt2g))
    self.wait()
    self.play(Transform(pt2c, exp2d))
    self.wait(3)
    self.play(Transform(pt2a, pt2h))
    self.wait(3)
    self.play(Transform(pt2c, exp2e))
    self.wait(3)
    self.play(Transform(pt2c, exp2f))
    self.wait(3)

    self.play(FadeOut(pt2a),FadeOut(exp2a),FadeOut(pt2c))
    self.wait()

    pt3a = MathTex("\\text{But why does this work?}")
    pt3b = MathTex("\\text{But why does this work?}").scale(0.75).to_edge(UL)
    pt3c = MathTex("\\text{Well, let's look at the generalized quadratic again...}").scale(0.75).to_edge(UL)
    pt3d = MathTex("ax^2 + bx + c = 0")
    pt3e = MathTex("\\text{For the case where a = 1, we can remove } a \\text{...}").scale(0.75).to_edge(UL)
    pt3f = MathTex("x^2 + bx + c = 0")
    pt3g = MathTex("\\text{And we know that we can factorise it like this...}").scale(0.75).to_edge(UL)
    pt3h = MathTex("x^2 + bx + c = (x + e)(x + g)")
    pt3i = MathTex("\\text{Since if we expand it, we will get our original expanded quadratic...").scale(0.75).to_edge(UL)
    pt3j = MathTex("x^2 + bx + c = x^2 + ex + gx + eg")
    pt3k = MathTex("x^2 + bx + c = x^2 + x(e + g) + eg")
    pt3l = MathTex("\\text{Where } e \\text{ and } g \\text{ add up to b, and when multipled give c").scale(0.75).to_edge(UL)

    self.play(Write(pt3a))
    self.wait()
    self.play(Transform(pt3a, pt3b))
    self.wait()
    self.play(Transform(pt3a, pt3c))
    self.wait(3)
    self.play(Write(pt3d))
    self.wait(2)
    self.play(Transform(pt3a, pt3e))
    self.wait(2)
    self.play(Transform(pt3d, pt3f))
    self.wait(2)
    self.play(Transform(pt3a, pt3g))
    self.wait()
    self.play(Transform(pt3d, pt3h))
    self.wait(4)
    self.play(Transform(pt3a, pt3i))
    self.wait(3)
    self.play(Transform(pt3d, pt3j))
    self.wait(3)
    self.play(Transform(pt3d, pt3k))
    self.wait(3)
    self.play(Transform(pt3a, pt3l))
    self.wait(4)

    self.play(FadeOut(pt3a),FadeOut(pt3d))
    self.wait()

    pt4a = MathTex("\\text{So let's use this same idea, but for when }a > 1...")
    pt4b = MathTex("\\text{So let's use this same idea, but for when }a > 1...").scale(0.75).to_edge(UL)
    pt4c = MathTex("ax^2 + bx + c = (x + e)(x + g)")
    pt4d = MathTex("\\text{Now that } a > 1 \\text{, the x's in both brackets must have factors that multiply to a}").scale(0.75).to_edge(UL)
    pt4e = MathTex("ax^2 + bx + c = (dx + e)(fx + g)")
    pt4f = MathTex("\\text{So if we expand this...}").scale(0.75).to_edge(UL)
    pt4g = MathTex("ax^2 + bx + c = dfx^2 + dgx + efx + eg")
    pt4h = MathTex("ax^2 + bx + c = dfx^2 + x(dg + ef) + eg")
    pt4i = MathTex("\\text{Notice how } a = df \\text{, } b = dg + ef \\text{ and } c = eg").scale(0.75).to_edge(UL)
    pt4j = MathTex("{{a}}x^2 + {{b}}x + {{c}} = {{df}}x^2 + x({{dg}} + {{ef}}) + {{eg}}")
    pt4k = MathTex("\\text{Also notice how } ac = dfeg \\text{, which is the same thing as } dgef").scale(0.75).to_edge(UL)
    pt4l = MathTex("\\text{This simply means that we can find } dg \\text{ and } ef \\text{ by finding two numbers that:}").scale(0.75).to_edge(UL)
    pt4m = MathTex("\\text{- when multipled give } ac \\text{ and when added give b...}").scale(0.75).to_edge(UL).shift(DOWN)
    pt4n = MathTex("\\text{After this, we expand b as the sum of those two numbers: } dg \\text{ and } ef...").scale(0.75).to_edge(UL)
    pt4o = MathTex("\\text{Then factorise by grouping...}").scale(0.75).to_edge(UL)
    pt4p = MathTex("{{a}}x^2 + {{b}}x + {{c}} = {{df}}x^2 + {{dg}}x + {{ef}}x + {{eg}}")
    pt4q = MathTex("ax^2 + bx + c = dx(fx + g) + e(fx + g)")
    pt4r = MathTex("\\text{And simplify...}").scale(0.75).to_edge(UL)
    pt4s = MathTex("ax^2 + bx + c = (dx + e)(fx + g)")
    pt4t = MathTex("\\text{That is our factorized quadratic!").scale(0.75).to_edge(UL)

    pt4j.set_color_by_tex("a", RED)
    pt4j.set_color_by_tex("b", YELLOW)
    pt4j.set_color_by_tex("c", BLUE)

    pt4j.set_color_by_tex("df", RED)
    pt4j.set_color_by_tex("dg", YELLOW)
    pt4j.set_color_by_tex("ef", YELLOW)
    pt4j.set_color_by_tex("eg", BLUE)

    pt4p.set_color_by_tex("a", RED)
    pt4p.set_color_by_tex("b", YELLOW)
    pt4p.set_color_by_tex("c", BLUE)

    pt4p.set_color_by_tex("df", RED)
    pt4p.set_color_by_tex("dg", YELLOW)
    pt4p.set_color_by_tex("ef", YELLOW)
    pt4p.set_color_by_tex("eg", BLUE)

    self.play(Write(pt4a))
    self.wait(2)
    self.play(Transform(pt4a, pt4b))
    self.wait()
    self.play(Write(pt4c))
    self.wait(2)
    self.play(Transform(pt4a, pt4d))
    self.wait(2)
    self.play(Transform(pt4c, pt4e))
    self.wait(3)
    self.play(Transform(pt4a, pt4f))
    self.wait()
    self.play(Transform(pt4c, pt4g))
    self.wait(2)
    self.play(Transform(pt4c, pt4h))
    self.wait(3)
    self.play(Transform(pt4a, pt4i))
    self.wait(2)
    self.play(Transform(pt4c, pt4j))
    self.wait(6)
    self.play(Transform(pt4a, pt4k))
    self.wait(6)
    self.play(Transform(pt4a, pt4l))
    self.wait(4)
    self.play(Write(pt4m))
    self.wait(4)
    self.play(FadeOut(pt4m))
    self.play(Transform(pt4a, pt4n))
    self.wait(4)
    self.play(Transform(pt4c, pt4p))
    self.wait(2)
    self.play(Transform(pt4a, pt4o))
    self.wait(2)
    self.play(Transform(pt4c, pt4q))
    self.wait(2)
    self.play(Transform(pt4a, pt4r))
    self.wait(2)
    self.play(Transform(pt4c, pt4s))
    self.wait(3)
    self.play(Transform(pt4a, pt4t))
    self.wait(3)
